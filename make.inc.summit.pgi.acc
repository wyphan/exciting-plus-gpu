#==============================================================================
# Exciting-Plus make.inc file for Summit (OLCF) with PGI compilers
# Last edited: May 12, 2021 (WYP)
#==============================================================================

MAKE = make
COMPILER = pgi

# Compiler switch to turn on the preprocessor
CPP_OPTS = -Mpreprocess

# Add your custom preprocessor defines here
#CPP_OPTS += -D_DEBUG_bmegqblh_ # Output debugging info related to bmegqblh
#CPP_OPTS += -D_DEBUG_megqblh_ # Output debugging info related to genmegqblh
#CPP_OPTS += -D_DUMP_spinor_ud_ # Dump spinor_ud when spinpol = .TRUE.
#CPP_OPTS += -D_DUMP_megqblh_ # Dump matrix elements
#CPP_OPTS += -D_DUMP_gntuju_ # Dump gntuju matrices
CPP_OPTS += -D_PACK_gntuju_ # Pack gntuju into gntuju_packed

# Common compile time options
F90_OPTS = $(CPP_OPTS)

# Add your common compile time options here
#F90_OPTS += -Minfo=ftn,loop,opt,mp,par,vect,accel # Show optimizer log
F90_OPTS += -Minfo=all # Show optimizer log
F90_OPTS += -Mstack_arrays # Use stack instead of heap for automatic arrays
F90_OPTS += -mcmodel=medium # Use 64-bit memory model to allow data >2GB
#F90_OPTS += -Minline=size:99 # Try to inline ZGEMM_acc subroutine
F90_OPTS += -Mcuda # Enable CUDA Fortran

#==============================================================================
# OpenACC
#==============================================================================

#F90_OPTS += -ta=tesla:managed:debug # managed memory, debug build
F90_OPTS += -ta=tesla:managed # managed memory, optimized build

#F90_OPTS += -ta=tesla:debug # non-managed memory, debug build
#F90_OPTS += -ta=tesla # non-managed memory, optimized build

#F90_OPTS += -ta=multicore # run on CPU (for debugging purposes)

#F90_OPTS += -acc=verystrict # debug build
F90_OPTS += -acc=autopar # optimized build

#F90_OPTS += -ta=tesla:autocompare # use PCAST (PGI Compiler Assisted Software Testing)

#==============================================================================
# MPI
#==============================================================================

F90 = mpifort
CC  = mpicc
CXX = mpic++
#MPI_CPP_OPTS = -D_MPI_ -D_GPUDIRECT_
MPI_CPP_OPTS = -D_MPI_
CPP_OPTS += $(MPI_CPP_OPTS)

#==============================================================================
# OpenMP
#==============================================================================

# These are passed at compile time and link time
# Don't forget to `export OMP_STACKSIZE=2G` at runtime
OMP_OPTS = -mp
F90_OPTS += $(OMP_OPTS)

#==============================================================================
# Serial compiler (for utilities)
#==============================================================================

F90SERIAL = pgfortran
F90_OPTS_SERIAL = $(filter-out $(OMP_OPTS),$(filter-out $(MPI_CPP_OPTS),$(F90_OPTS)))

#==============================================================================
# Compiler and linker options
#==============================================================================

# Debugging
#CPP_OPTS += -DEBUG=1
#F90_OPTS += -g -Minform=warn
#F90_LINK_OPTS = $(F90_OPTS)
#EXE_SFX = dbg-acc

# Debugging with extra checks
# (Don't forget to enable core dump generation using `ulimit -c unlimited`)
#CPP_OPTS += -DEBUG=2 # Set to 3 for kernel debugging info (bounds checking)
#F90_OPTS += -g -O0 -Minform=warn -Mbounds -traceback
#F90_LINK_OPTS = $(F90_OPTS)
#EXE_SFX = dbgchk-acc

# Optimized build with equivalent options to '-O2'
# Note: don't use '-Munroll', it will incorrectly unroll the nstspin loop in genmegqblh()
F90_OPTS += -gopt -O -Mlre -Mvect=simd -Mflushz -Mcache_align -Mnoinline -Minform=warn
F90_LINK_OPTS = $(F90_OPTS) -fpic
EXE_SFX = opt-acc

# Profiling
# Note: don't use '-Mpfi', it is incompatible with '-mp' and '-fpic'
#CPP_OPTS += -D_USE_NVTX_ -I${OLCF_CUDA_ROOT}/include
#NVTX_LIB = -L${OLCF_CUDA_ROOT}/lib64 -lnvToolsExt
#F90_OPTS += -Minstrument -Mprof=ccff -O -Mlre -Mflushz -Mcache_align -Mnoinline -Minform=warn
#F90_LINK_OPTS = $(F90_OPTS) -fpic
#EXE_SFX = prof-acc

# MPI tracing with mpiP
#CPP_OPTS += -D_USE_NVTX_ -I${OLCF_CUDA_ROOT}/include
#NVTX_LIB = -L${OLCF_CUDA_ROOT}/lib64 -lnvToolsExt
#F90_OPTS += -gopt -Minstrument -Mprof=ccff -O -Mlre -Mflushz -Mcache_align -Mnoinline -Minform=warn
#F90_LINK_OPTS = $(F90_OPTS) -fpic -lmpiP
#EXE_SFX = mpip-acc

## For PGI 20.1
# Fully optimized build
# Note: with PGI 19.9 and 19.10, for some reason using '-O2' or higher
# (including '-fast' and '-fastsse') chokes on autoradmt.f90:39
#     DO i = -1, 1
#   (see OLCF ticket #419691)
# This has been fixed in PGI 20.1
#F90_OPTS += -fast -Munroll -Mnoinline -Minform=warn
#F90_LINK_OPTS = $(F90_OPTS) -fpic
#EXE_SFX = fast-acc

# Profiling, fully optimized
#F90_OPTS += -Minstrument -Mprof=ccff -fast -Munroll -Mnoinline -Minform=warn
#F90_LINK_OPTS = $(F90_OPTS) -fpic
#EXE_SFX = fastprof-acc

#==============================================================================
# BLAS and LAPACK
#==============================================================================

# Use PGI's bundled BLAS and LAPACK
# Note: it's OpenBLAS 0.3.7, might not be thread-safe
#LAPACK_LIB = -lblas -llapack

# Use reference BLAS and LAPACK 3.8.0
# Make sure to `module load netlib-lapack` when building
#LAPACK_LIB = -L${OLCF_NETLIB_LAPACK_ROOT}/lib64 -lblas -llapack

# Use OpenBLAS 0.3.10
#OBLAS_PATH = /ccs/proj/mat201/openblas-0.3.10/pgi-19.10
#LAPACK_LIB = -L$(OBLAS_PATH)/lib -lopenblas

# Use IBM ESSL (depends on libxlf90_r)
# This path was extracted from the modules and stored as summit-xlpaths.sh
# Make sure to `source summit-xlpaths.sh` and `module load essl`
# Note: it used to be necessary to also load libxlf90_r path to LD_LIBRARY_PATH
#       on run time; this was fixed with the Mar 10 2020 stack upgrade
ESSL_PATH = ${OLCF_ESSL_ROOT}/lib64
REFLAPACK_PATH = ${OLCF_NETLIB_LAPACK_ROOT}/lib64
#XLF_PATH = ${OLCF_XLF_ROOT}/lib
#XLSMP_PATH = ${OLCF_XLSMP_ROOT}/lib
LAPACK_LIB = -L$(ESSL_PATH) -lessl -L$(REFLAPACK_PATH) -llapack -lessl
#LAPACK_LIB = -L$(ESSL_PATH) -lesslsmp -L$(XLF_PATH) -lxlf90_r -L$(XLSMP_PATH) -lxlsmp

# Use MAGMA
# Make sure to `module load magma`
MAGMA_INC   = -I${MAGMADIR}/include
LAPACK_LIB += -L${MAGMADIR}/lib -lmagma
CPP_OPTS   += -D_MAGMA_ -DNGPUS=1
F90_OPTS   += $(MAGMA_INC)

#==============================================================================
# FFTW 3
#==============================================================================

# To disable, comment these three lines
# Make sure to `module load fftw`
FFT_INC = -I$(OLCF_FFTW_ROOT)/include
FFT_LIB = -L$(OLCF_FFTW_ROOT)/lib -lfftw3_omp -lfftw3 -lm
FFT_CPP_OPTS = -D_FFTW3_

CPP_OPTS += $(FFT_CPP_OPTS)
F90_OPTS += $(FFT_INC)

#==============================================================================
# HDF5
#==============================================================================

# To disable, comment these three lines
# Make sure to `module load hdf5`
HDF5_INC = -I${OLCF_HDF5_ROOT}/include
HDF5_LIB = -L${OLCF_HDF5_ROOT}/lib -lhdf5_fortran -lhdf5_cpp -lhdf5_hl -lhdf5 -ldl
HDF5_CPP_OPTS = -D_HDF5_

CPP_OPTS += $(HDF5_CPP_OPTS)
F90_OPTS += $(HDF5_INC)

#==============================================================================
# Other libraries (retained here for historical purposes)
#==============================================================================

# ==- compile with libXC support ===
#CPP_OPTS := $(CPP_OPTS) -D_LIBXC_
#XC_LIB =

# ==- compile with NFFT support ===
#CPP_OPTS := $(CPP_OPTS) -D_NFFT_
#NFFT_INC = -I$(HOME)/local/include
#NFFT_LIB = $(HOME)/local/lib/libnfft3.a $(HOME)/local/lib/libfftw3.a

# === compile with Madness API ===
#CPP_OPTS := $(CPP_OPTS) -D_MAD_
#MADNESS_INC = -I$(HOME)/local/include
#MADNESS_LIB = -L$(HOME)/local/lib/ -lMADmra -lMADlinalg -lMADtensor -lMADmisc -lMADmuparser -lMADtinyxml -lMADworld -lmpichcxx -lstdc++

#==============================================================================
# List all libraries to link
#==============================================================================

LIBS = $(LAPACK_LIB) $(FFT_LIB) $(HDF5_LIB) $(NVTX_LIB)
